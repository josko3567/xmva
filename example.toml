[common]
output  = "ya_ecgen.h"
prefix  = "YA_ECGEN_"
repeats = 10

[preamble]
raw = """
#define @{prefix}ERROR_COOL(message) static_assert(false, message)
"""

keys = [
    {key = "i will request a rectration of my payment ðŸ¥º", name = {tags = ["NO_PREFIX"], string = "@{prefix}ERROR"}}
]

[[definition]]
key        = "emsg_print"
name       = {tags = ["NO_PREFIX"], string = "@{i will request a rectration of my payment ðŸ¥º}"}
parameters = ["message"] # instead of raw.
expansion  = "static_assert(false, message)"

[[definition]] 
key       = "emsg_unparity"
name      = "ERROR_MESSAGE_UNPARITY"
expansion = "\"@{prefix}: [Argument unparity] Error code doesn't have its message pair.\""

[[definition]] 
key       = "emsg_no_args"
name      = "ERROR_MESSAGE_NO_ARGS"
expansion = "\"@{prefix}: [No members] No member was specified for this enum type.\""

[core]
xmva = "YA_ECGEN"
args = [
    {key = "lowname", name = "@{prefix}lowercase_name"},
    {key = "uprname", name = "UPPERCASE_NAME"},
    {varadict = 2}
]

[[generator]]
preamble  = "enum ya_ ## ${lowname} ## _error_codes {"
repeat    = "YA_ ## ${uprname} ## $(0)$[,]"
postamble = "}"

[generator.fallbacks]
unparity = "@{emsg_print}(@{emsg_unparity})"
empty    = "@{emsg_print}(@{emsg_no_args})"

[[generator]]
preamble  = "const char ya_ ## ${lowname} ## conversion_table[] = "
repeat    = "[YA_ ## ${uprname} ## $(0)] = $(1)$[,]"
postamble = ";"

[generator.fallbacks]
unparity = "@{emsg_print}(@{emsg_unparity})"
empty    = "@{emsg_print}(@{emsg_no_args})"
